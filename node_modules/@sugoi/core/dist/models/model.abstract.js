"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../index");
var ModelAbstract = /** @class */ (function () {
    function ModelAbstract() {
        this.collectionName = this.constructor['name'];
    }
    ModelAbstract.find = function (query, options) {
        if (query === void 0) { query = {}; }
        if (options === void 0) { options = {}; }
        var that = this;
        query = ModelAbstract.castStringQuery(query);
        return that.findEmitter(query, options)
            .then(function (res) {
            res = res.map(function (collection) {
                return that.clone(that, collection);
            });
            return res;
        });
    };
    ModelAbstract.findOne = function (query, options) {
        if (query === void 0) { query = {}; }
        if (options === void 0) { options = {}; }
        options.limit = 1;
        return this.find(query, options)
            .then(function (res) { return res ? res[0] : null; });
    };
    ModelAbstract.findEmitter = function (query, options) {
        throw new index_1.SugModelException(index_1.Exceptions.NOT_IMPLEMENTED.message, index_1.Exceptions.NOT_IMPLEMENTED.code, "Find Emitter " + this.constructor.name);
    };
    ;
    ModelAbstract.prototype.save = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var savedData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.beforeValidate()
                            .then(function () {
                            return _this.validate();
                        })
                            .then(function (valid) {
                            if (valid !== true)
                                throw new index_1.SugModelException(index_1.Exceptions.INVALID.message, index_1.Exceptions.INVALID.code, valid);
                        })
                            .then(function () { return _this.beforeSave(); })
                            .then(function () { return _this.saveEmitter(options); })
                            .then(function (_savedData) {
                            savedData = _savedData;
                            return _this.afterSave();
                        })
                            .then(function () {
                            return savedData;
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ModelAbstract.prototype.beforeValidate = function () {
        return 'sugBeforeValidate' in this
            ? this.sugBeforeValidate()
            : Promise.resolve();
    };
    ModelAbstract.prototype.validate = function () {
        return 'sugValidate' in this
            ? this.sugValidate().then(function (valid) { return (valid === null || valid === undefined) ? true : !!valid; })
            : Promise.resolve(true);
    };
    ;
    ModelAbstract.prototype.beforeSave = function () {
        return "sugBeforeSave" in this
            ? this.sugBeforeSave()
            : Promise.resolve();
    };
    ;
    ModelAbstract.prototype.afterSave = function () {
        return 'sugAfterSave' in this
            ? this.sugAfterSave()
            : Promise.resolve();
    };
    ;
    ModelAbstract.prototype.update = function (options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var updatedData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.beforeValidate()
                            .then(function () {
                            return _this.validate();
                        })
                            .then(function (valid) {
                            if (valid !== true)
                                throw new index_1.SugModelException(index_1.Exceptions.INVALID.message, index_1.Exceptions.INVALID.code, valid);
                        })
                            .then(function () { return _this.beforeUpdate(); })
                            .then(function () { return _this.updateEmitter(options); })
                            .then(function (_updatedData) {
                            updatedData = _updatedData;
                            return _this.afterUpdate();
                        })
                            .then(function () {
                            return updatedData;
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ModelAbstract.prototype.beforeUpdate = function () {
        return 'sugBeforeUpdate' in this
            ? this.sugBeforeUpdate()
            : Promise.resolve();
    };
    ;
    ModelAbstract.prototype.afterUpdate = function () {
        return 'sugAfterUpdate' in this
            ? this.sugAfterUpdate()
            : Promise.resolve();
    };
    ;
    ModelAbstract.prototype.remove = function (query) {
        return this.removeEmitter(query);
    };
    ModelAbstract.clone = function (classIns, data) {
        var func = function () {
        };
        func.prototype = classIns.prototype;
        var temp = new func();
        classIns.apply(temp, []);
        temp.constructor = classIns;
        Object.assign(temp, data);
        return temp;
    };
    ModelAbstract.castStringQuery = function (query) {
        if (typeof query === "string") {
            query = { id: query };
        }
        return query;
    };
    return ModelAbstract;
}());
exports.ModelAbstract = ModelAbstract;
